/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bloodbowl.gui.map;

import bloodbowl.model.map.Cell;
import bloodbowl.model.map.DugoutCell;
import bloodbowl.model.players.Player;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.image.BufferedImage;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author mavencode
 */
public class DugOutGridGrid extends JTable implements DragGestureListener, Observer {

    private JLabel lbl;
    private ImageIcon icon;
    private DugoutCell dugoutCell;
    private Player player;
    //Ã¥private ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap(BloodBowl.class);

    public DugOutGridGrid() {
        super.setBorder(BorderFactory.createLineBorder(Color.ORANGE, 4));

        this.setDragEnabled(true);
        //MyDropTargetListener lstner = new MyDropTargetListener(this);
        DragSource ds = new DragSource();
        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_MOVE, this);
    }

    @Override
    public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
        Component cell = super.prepareRenderer(renderer, row, column);
        lbl = new JLabel();

        if (row < 4) {
            cell.setBackground(Color.red);
        } else if (row >= 4 && row < 7) {
            cell.setBackground(new Color(65, 44, 239));
        } else if (row >= 8) {
            cell.setBackground(new Color(237, 239, 44));
        }

        dugoutCell = (DugoutCell) getModel().getValueAt(row, column);

        if (dugoutCell.hasPlayer()) {
            lbl = new JLabel("D");
            return lbl;
        } else {
            return cell;
        }

//        if (cellPitch != null) {
//            if (cellPitch.getPlayer() != null) {
//                //BufferedImage scaled =Utility.imageScale(resourceMap.getImageIcon("catcher.icon"), 40, 40);
//                 //lbl = new JLabel(new ImageIcon(scaled));
//            }
//        }

    }

    public void dragGestureRecognized(DragGestureEvent dge) {
        Cursor cursor = null;
        //JPanel panel = (JPanel) dge.getComponent();
        int row = this.getSelectedRow();
        int column = this.getSelectedColumn();
        Cell cell = (Cell) this.getModel().getValueAt(row, column);

        if (dge.getDragAction() == DnDConstants.ACTION_MOVE) {
            cursor = DragSource.DefaultMoveDrop;
        }
        /*
        if (cell.getPlayer() != null) {            
        dge.startDrag(cursor, new TransferablePlayer(cell.getPlayer()));
        cell.setPlayer(null);
        }
        }
         *
         */
    }

    public void update(Observable o, Object arg) {

        if (o instanceof Player) {
            player = (Player) o;
            if (player.getActive()==false) {
                if (player.getLocation() instanceof DugoutCell) {
                    DugoutCell cell = (DugoutCell) player.getLocation();

                    dugoutCell = (DugoutCell) this.getValueAt(cell.getRow(), cell.getColumn());
                    dugoutCell.setPlayer();
                }                
            } else {
                Cell cell = (Cell) player.getLocation();
                dugoutCell = (DugoutCell) this.getValueAt(cell.getRow(), cell.getColumn());
                dugoutCell.resetPlayer();
            }
        }
        this.repaint();
    }
}
