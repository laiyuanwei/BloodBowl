/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BloodBowl.java
 *
 * Created on Jan 4, 2011, 7:17:47 PM
 */
package bloodbowl.gui.map;

import bloodbowl.engine.Game;
import bloodbowl.gui.dialog.GameStart;
import bloodbowl.gui.dialog.SaveGame;
import bloodbowl.gui.dialog.TeamEditor;
import bloodbowl.model.managers.ActionManager;
import bloodbowl.model.managers.GameReferee;
import bloodbowl.model.map.PitchCell;
import bloodbowl.model.objects.Ball;
import bloodbowl.model.objects.Coin;
import bloodbowl.model.players.Player;
import bloodbowl.model.players.Skills;
import bloodbowl.model.teams.Team;
import bloodbowl.model.teams.TeamType;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.ToolTipManager;
import javax.swing.table.TableColumn;

/**
 * Main game layout
 *
 * @author mavencode
 */
public class BloodBowl extends javax.swing.JFrame {

    private Team team1;
    private Team team2;
    private Game gameEngine;
    private GameStart splashScreen;
    private boolean tossCoinsDone;
    private Ball ball;
    private GameReferee referee;
    private ActionManager actionManager;

    /** Creates new form BloodBowl */
    public BloodBowl() {

        initComponents();
        ToolTipManager.sharedInstance().setInitialDelay(0);

        gameEngine = Game.getInstance();
        referee = new GameReferee();
        actionManager = new ActionManager(gameEngine);
        setCoinTossMenu(false);

        setUpMap();

        setUpTeam1DugOut();
        setUpTeam2DugOut();

        initialiseTeams();

        ball = gameEngine.getGameBall();
        ball.addObserver(tblGamePitch);

    }

    public BloodBowl(Game gameEngine) {

        initComponents();

        this.gameEngine = gameEngine;
        referee = new GameReferee();
        actionManager = new ActionManager(gameEngine);

        ToolTipManager.sharedInstance().setInitialDelay(0);
        if (actionManager.IsKickedOff()) {
            setCoinTossMenu(true);
        }

        setUpAndRestoreMap();

        setUpTeam1DugOut();
        setUpTeam2DugOut();

        ball = gameEngine.getGameBall();
        ball.addObserver(tblGamePitch);

        restoreTeams();
    }

    private void setCoinTossMenu(boolean flag) {
        if (flag) {
            tossCoinsDone = true;
            jMenuTossCoin.setEnabled(false);
        } else {
            tossCoinsDone = false;
            jMenuTossCoin.setEnabled(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPnlBackground = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLblTeam1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLblTeam2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPnlLog = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLstActions = new javax.swing.JList();
        jPanel9 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLblIsActive = new javax.swing.JLabel();
        jLblMA = new javax.swing.JLabel();
        jLblAG = new javax.swing.JLabel();
        jLblAV = new javax.swing.JLabel();
        jLblST = new javax.swing.JLabel();
        jLblSkills = new javax.swing.JLabel();
        jLblPlayerImage = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLstPlayerSkills = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPnlDugOutTeamA = new javax.swing.JPanel();
        pnlBoard = new javax.swing.JPanel();
        jPnlDugOutTeamB = new javax.swing.JPanel();
        gameMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveGameMenuItem = new javax.swing.JMenuItem();
        quitGameMenuItem = new javax.swing.JMenuItem();
        jMenuTossCoin = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPnlBackground.setBackground(new java.awt.Color(102, 102, 102));
        jPnlBackground.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));
        jPnlBackground.setName("jPnlBackground"); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setName("jPanel4"); // NOI18N

        jPanel3.setBackground(java.awt.Color.lightGray);
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, java.awt.Color.orange));
        jPanel3.setName("jPanel3"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel3.setForeground(new java.awt.Color(204, 0, 51));
        jLabel3.setText("Team 1:");
        jLabel3.setName("jLabel3"); // NOI18N

        jLblTeam1.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLblTeam1.setText("Team :");
        jLblTeam1.setName("jLblTeam1"); // NOI18N

        jLabel5.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel5.setText("Points: O");
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel6.setText("Turn: 8/8");
        jLabel6.setName("jLabel6"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLblTeam1))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel6))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel5)))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jLabel3)
                .add(27, 27, 27)
                .add(jLblTeam1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel5)
                .add(12, 12, 12)
                .add(jLabel6)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setName("jPanel5"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel2.setForeground(new java.awt.Color(204, 0, 51));
        jLabel2.setText("Team 2:");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel7.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel7.setText("Points: O");
        jLabel7.setName("jLabel7"); // NOI18N

        jLblTeam2.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLblTeam2.setText("Team :");
        jLblTeam2.setName("jLblTeam2"); // NOI18N

        jLabel9.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel9.setText("Turn : 8/8");
        jLabel9.setName("jLabel9"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLblTeam2)
                            .add(jLabel9)))
                    .add(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel7)))
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jLabel2)
                .add(33, 33, 33)
                .add(jLblTeam2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel7)
                .add(12, 12, 12)
                .add(jLabel9)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jPnlLog.setBackground(new java.awt.Color(0, 0, 255));
        jPnlLog.setBorder(new javax.swing.border.MatteBorder(null));
        jPnlLog.setName("jPnlLog"); // NOI18N
        jPnlLog.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(0, 0, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setFocusTraversalPolicyProvider(true);
        jPanel7.setName("jPanel7"); // NOI18N
        jPanel7.setPreferredSize(new java.awt.Dimension(200, 200));

        jLabel10.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel10.setForeground(new java.awt.Color(204, 0, 51));
        jLabel10.setText("Referee");
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bloodbowl/resources/referee.png"))); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel10)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jLabel10)
                .add(31, 31, 31)
                .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 138, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jPnlLog.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 142, 298));

        jPanel1.setBackground(new java.awt.Color(0, 0, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jLabel8.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel8.setForeground(new java.awt.Color(204, 0, 51));
        jLabel8.setText("Commentaries");
        jLabel8.setName("jLabel8"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(63, 63, 63)
                        .add(jLabel8))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
        );

        jPnlLog.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 250, 300));

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel8.setName("jPanel8"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jLstActions.setFont(new java.awt.Font("Lucida Blackletter", 1, 14));
        jLstActions.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Move", "Throw", "Catch", "Block" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jLstActions.setName("jLstActions"); // NOI18N
        jScrollPane2.setViewportView(jLstActions);

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
        );

        jPnlLog.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 52, 170, 250));

        jPanel9.setBackground(new java.awt.Color(0, 0, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setName("jPanel9"); // NOI18N

        jButton2.setText("End Turn");
        jButton2.setName("jButton2"); // NOI18N

        jLabel11.setText("Current Team");
        jLabel11.setName("jLabel11"); // NOI18N

        jLabel13.setText("[TEAM]");
        jLabel13.setName("jLabel13"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(42, 42, 42)
                        .add(jLabel11)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .add(jLabel13)
                .add(59, 59, 59))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .add(72, 72, 72)
                .add(jButton2)
                .add(18, 18, 18)
                .add(jLabel11)
                .add(18, 18, 18)
                .add(jLabel13)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        jPnlLog.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 0, 170, 300));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setName("jPanel6"); // NOI18N

        jLblIsActive.setFont(new java.awt.Font("Lucida Blackletter", 0, 14));
        jLblIsActive.setText("Is Active:");
        jLblIsActive.setName("jLblIsActive"); // NOI18N

        jLblMA.setFont(new java.awt.Font("Lucida Blackletter", 0, 14));
        jLblMA.setText("MA:");
        jLblMA.setName("jLblMA"); // NOI18N

        jLblAG.setFont(new java.awt.Font("Lucida Blackletter", 0, 14));
        jLblAG.setText("AG:");
        jLblAG.setName("jLblAG"); // NOI18N

        jLblAV.setFont(new java.awt.Font("Lucida Blackletter", 0, 14));
        jLblAV.setText("AV:");
        jLblAV.setName("jLblAV"); // NOI18N

        jLblST.setFont(new java.awt.Font("Lucida Blackletter", 0, 14));
        jLblST.setText("ST:");
        jLblST.setName("jLblST"); // NOI18N

        jLblSkills.setFont(new java.awt.Font("Lucida Blackletter", 1, 14));
        jLblSkills.setText("Player Skills");
        jLblSkills.setName("jLblSkills"); // NOI18N

        jLblPlayerImage.setName("jLblPlayerImage"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jLstPlayerSkills.setFont(new java.awt.Font("Lucida Grande", 1, 12));
        jLstPlayerSkills.setName("jLstPlayerSkills"); // NOI18N
        jScrollPane3.setViewportView(jLstPlayerSkills);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLblAV)
                            .add(jLblMA)
                            .add(jLblAG)
                            .add(jLblST)))
                    .add(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLblIsActive)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 40, Short.MAX_VALUE)
                .add(jLblPlayerImage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(295, Short.MAX_VALUE)
                .add(jLblSkills)
                .add(56, 56, 56))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLblSkills)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jLblIsActive)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 25, Short.MAX_VALUE)
                        .add(jLblMA)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLblAG)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLblAV)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLblST)
                        .add(78, 78, 78))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLblPlayerImage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 171, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        jPnlLog.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 50, 430, 250));

        jLabel4.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel4.setForeground(new java.awt.Color(204, 0, 51));
        jLabel4.setText("Select Action");
        jLabel4.setName("jLabel4"); // NOI18N
        jPnlLog.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, -1, 16));

        jLabel1.setFont(new java.awt.Font("Lucida Blackletter", 0, 18));
        jLabel1.setForeground(new java.awt.Color(204, 0, 51));
        jLabel1.setText("Player Statistics");
        jLabel1.setName("jLabel1"); // NOI18N
        jPnlLog.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 20, -1, -1));

        jPnlDugOutTeamA.setBackground(java.awt.Color.lightGray);
        jPnlDugOutTeamA.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPnlDugOutTeamA.setName("jPnlDugOutTeamA"); // NOI18N
        jPnlDugOutTeamA.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPnlDugOutTeamALayout = new org.jdesktop.layout.GroupLayout(jPnlDugOutTeamA);
        jPnlDugOutTeamA.setLayout(jPnlDugOutTeamALayout);
        jPnlDugOutTeamALayout.setHorizontalGroup(
            jPnlDugOutTeamALayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 114, Short.MAX_VALUE)
        );
        jPnlDugOutTeamALayout.setVerticalGroup(
            jPnlDugOutTeamALayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 339, Short.MAX_VALUE)
        );

        pnlBoard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlBoard.setName("pnlBoard"); // NOI18N

        org.jdesktop.layout.GroupLayout pnlBoardLayout = new org.jdesktop.layout.GroupLayout(pnlBoard);
        pnlBoard.setLayout(pnlBoardLayout);
        pnlBoardLayout.setHorizontalGroup(
            pnlBoardLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 730, Short.MAX_VALUE)
        );
        pnlBoardLayout.setVerticalGroup(
            pnlBoardLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 372, Short.MAX_VALUE)
        );

        jPnlDugOutTeamB.setBackground(java.awt.Color.lightGray);
        jPnlDugOutTeamB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPnlDugOutTeamB.setName("jPnlDugOutTeamB"); // NOI18N
        jPnlDugOutTeamB.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPnlDugOutTeamBLayout = new org.jdesktop.layout.GroupLayout(jPnlDugOutTeamB);
        jPnlDugOutTeamB.setLayout(jPnlDugOutTeamBLayout);
        jPnlDugOutTeamBLayout.setHorizontalGroup(
            jPnlDugOutTeamBLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPnlDugOutTeamBLayout.setVerticalGroup(
            jPnlDugOutTeamBLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 327, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPnlBackgroundLayout = new org.jdesktop.layout.GroupLayout(jPnlBackground);
        jPnlBackground.setLayout(jPnlBackgroundLayout);
        jPnlBackgroundLayout.setHorizontalGroup(
            jPnlBackgroundLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPnlBackgroundLayout.createSequentialGroup()
                .add(jPnlBackgroundLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPnlBackgroundLayout.createSequentialGroup()
                        .add(jPnlDugOutTeamA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(pnlBoard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPnlDugOutTeamB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPnlLog, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0))
        );
        jPnlBackgroundLayout.setVerticalGroup(
            jPnlBackgroundLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPnlBackgroundLayout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPnlDugOutTeamB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPnlBackgroundLayout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPnlBackgroundLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPnlDugOutTeamA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlBoard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPnlLog, 0, 0, Short.MAX_VALUE))
            .add(jPnlBackgroundLayout.createSequentialGroup()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
        );

        fileMenu.setText("Game");

        saveGameMenuItem.setText("Save Game...");
        saveGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGameMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveGameMenuItem);

        quitGameMenuItem.setText("Quit");
        quitGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitGameMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitGameMenuItem);

        gameMenuBar.add(fileMenu);

        jMenuTossCoin.setText("Start");
        jMenuTossCoin.setName("jMenuTossCoin"); // NOI18N
        jMenuTossCoin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuTossCoinMouseClicked(evt);
            }
        });
        jMenuTossCoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTossCoinActionPerformed(evt);
            }
        });
        gameMenuBar.add(jMenuTossCoin);

        editMenu.setText("Moves");

        jMenuItem1.setText("Undo");
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        editMenu.add(jMenuItem1);

        gameMenuBar.add(editMenu);

        helpMenu.setText("Help");

        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        gameMenuBar.add(helpMenu);

        setJMenuBar(gameMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPnlBackground, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPnlBackground, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Quit game
     * @param evt
     */
    private void quitGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitGameMenuItemActionPerformed

        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to quit the game?", "BloodBowl", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            splashScreen = new GameStart();
            splashScreen.setVisible(true);

            this.setVisible(false);
        }
    }//GEN-LAST:event_quitGameMenuItemActionPerformed

    private void saveGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGameMenuItemActionPerformed
        saveGameDialog = new SaveGame(gameEngine);
        saveGameDialog.setVisible(true);
    }//GEN-LAST:event_saveGameMenuItemActionPerformed

    private void jMenuTossCoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTossCoinActionPerformed
    }//GEN-LAST:event_jMenuTossCoinActionPerformed

    private void jMenuTossCoinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuTossCoinMouseClicked
        String[] choices = {"Head", "Tail"};
        String[] options = {"Kick Ball", "Recieve Ball"};

        if (tossCoinsDone == false) {

            int response = JOptionPane.showOptionDialog(this, gameEngine.getTeamA().getName() + " Team Choose", "Toss Coin", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, choices, "BloodBowl");

            boolean outcome;

            //head selected
            if (response == 0) {
                outcome = referee.performToss(gameEngine.getTeamA(), gameEngine.getTeamB(), Coin.HEADS);
                //if head
                if (outcome) {
                    response = JOptionPane.showOptionDialog(this, referee.getTossMessage(), gameEngine.getTeamA().getName() + " Team Choose", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, "BloodBowl");
                    if (response == 0) {
                        //TeamOptions.KickBall);
                    } else {
                        //TeamOptions.RecieveBall);
                    }
                } else {
                    response = JOptionPane.showOptionDialog(this, referee.getTossMessage(), gameEngine.getTeamB().getName() + " Team Choose", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, "BloodBowl");
                    if (response == 0) {
                        //TeamOptions.KickBall;
                    } else {
                        //TeamOptions.RecieveBall;
                    }
                }
            } //tail selected
            else {
                outcome = referee.performToss(gameEngine.getTeamA(), gameEngine.getTeamB(), Coin.TAILS);

                if (outcome) {
                    response = JOptionPane.showOptionDialog(this, referee.getTossMessage(), gameEngine.getTeamA().getName() + " Team Choose", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, "BloodBowl");
                    if (response == 0) {
                        //TeamOptions.KickBall;
                    } else {
                        //TeamOptions.RecieveBall;
                    }
                } else {
                    response = JOptionPane.showOptionDialog(this, referee.getTossMessage(), gameEngine.getTeamB().getName() + " Team Choose", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, "BloodBowl");
                    if (response == 0) {
                        //TeamOptions.KickBall;
                    } else {
                        //TeamOptions.RecieveBall;
                    }
                }

            }

            tblGamePitch.setToolTip("Place Ball");

            jMenuTossCoin.setEnabled(false);
        }
    }//GEN-LAST:event_jMenuTossCoinMouseClicked

    private void setUpMap() {

        tblGamePitch = new PitchGrid();
        tableModel = new MapTableModel(tblGamePitch);

        tblGamePitch.setModel(tableModel);

        tblGamePitch.setRowHeight(25);
        TableColumn col;

        for (int i = 0; i < tblGamePitch.getColumnCount(); i++) {
            col = tblGamePitch.getColumnModel().getColumn(i);
            col.setMaxWidth(25);
        }

        tblGamePitch.setCellSelectionEnabled(true);
        tblGamePitch.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        pnlBoard.setLayout(new BorderLayout());
        pnlBoard.add(tblGamePitch, BorderLayout.CENTER);

        tblGamePitch.setSelectionBackground(Color.BLUE);

        tblGamePitch.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {

                int rowSelected = tblGamePitch.rowAtPoint(e.getPoint());
                int columnSelected = tblGamePitch.columnAtPoint(e.getPoint());


                Player player = gameEngine.getPlayerAtPitch(rowSelected, columnSelected);

                PitchCell pitchCell = new PitchCell(rowSelected, columnSelected);

                if (player == null) {
                    if (gameEngine.getSelectedPlayer() != null) {
                        gameEngine.movePlayer(pitchCell);
                    }
                } else {
                    gameEngine.setSelectedPlayer(player);

                    setPlayerStatistics(player);
                    showPlayersSkills(player);
                }

                ball.setLocation(rowSelected, columnSelected);
                tblGamePitch.setToolTip("");
 
                 if (!actionManager.IsKickedOff() && gameEngine.getPitch().hasBall()) {
                    JOptionPane.showMessageDialog(null, "Referee says: Game Kick off");
                    actionManager.kickOff();
                    ball.deleteObservers();
                }

            }
        });

        tblGamePitch.setDropMode(DropMode.ON_OR_INSERT);
    }

    /**
     * Set up team1 dugout
     */
    private void setUpTeam1DugOut() {

        tblTeam1Dugout = new DugOutGrid(gameEngine.getTeamA());

        tableModelTeam1 = new DugOutTableModel();

        tblTeam1Dugout.setModel(tableModelTeam1);
        tblTeam1Dugout.setRowHeight(30);

        TableColumn col;

        for (int i = 0; i < tblTeam1Dugout.getColumnCount(); i++) {
            col = tblTeam1Dugout.getColumnModel().getColumn(i);
            col.setMaxWidth(30);
        }

        tblTeam1Dugout.setRowSelectionAllowed(false);
        tblTeam1Dugout.setCellSelectionEnabled(true);

        tblTeam1Dugout.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jPnlDugOutTeamA.setLayout(new BorderLayout());
        jPnlDugOutTeamA.add(tblTeam1Dugout, BorderLayout.CENTER);

        tblTeam1Dugout.setDragEnabled(true);

        tblTeam1Dugout.repaint();

        tblTeam1Dugout.addMouseListener(new MouseAdapter() {

            //overides the mouse click events for dugout
            @Override
            public void mouseClicked(MouseEvent e) {

                int rowSelected = tblTeam1Dugout.rowAtPoint(e.getPoint());
                int columnSelected = tblTeam1Dugout.columnAtPoint(e.getPoint());

                Player player = gameEngine.getPlayerAtDugoutA(rowSelected, columnSelected);

                if (player != null) {
                    gameEngine.setSelectedPlayer(player);
                }

                setPlayerStatistics(player);
                showPlayersSkills(player);

            }

            //overides the mouse pressed events for dugout and sets the players transfer handler
            @Override
            public void mousePressed(MouseEvent e) {

                int rowSelected = tblTeam1Dugout.rowAtPoint(e.getPoint());
                int columnSelected = tblTeam1Dugout.columnAtPoint(e.getPoint());

                Player player = gameEngine.getPlayerAtDugoutA(rowSelected, columnSelected);

                if (player != null) {
                    gameEngine.setSelectedPlayer(player);

                    tblGamePitch.setTransferHandler(new PlayersTransferHandler(tblTeam1Dugout, team1, gameEngine));

                    System.out.println("Player tranfering initiated...");
                }
            }
        });
    }

    /**
     * Set up team2 dugout
     */
    private void setUpTeam2DugOut() {

        tblTeam2Dugout = new DugOutGrid(gameEngine.getTeamB());

        tableModelTeam2 = new DugOutTableModel();

        tblTeam2Dugout.setModel(tableModelTeam2);
        tblTeam2Dugout.setRowHeight(30);

        TableColumn col;

        for (int i = 0; i
                < tblTeam2Dugout.getColumnCount(); i++) {
            col = tblTeam2Dugout.getColumnModel().getColumn(i);
            col.setMaxWidth(30);
        }

        tblTeam2Dugout.setRowSelectionAllowed(false);
        tblTeam2Dugout.setCellSelectionEnabled(true);

        tblTeam2Dugout.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jPnlDugOutTeamB.setLayout(new BorderLayout());
        jPnlDugOutTeamB.add(tblTeam2Dugout, BorderLayout.CENTER);

        tblTeam2Dugout.setDragEnabled(true);
        tblTeam2Dugout.repaint();

        tblTeam2Dugout.addMouseListener(new MouseAdapter() {

            //overides the mouse click events for dugout
            @Override
            public void mouseClicked(MouseEvent e) {

                int rowSelected = tblTeam2Dugout.rowAtPoint(e.getPoint());
                int columnSelected = tblTeam2Dugout.columnAtPoint(e.getPoint());

                Player player = gameEngine.getPlayerAtDugoutB(rowSelected, columnSelected);

                if (player != null) {
                    gameEngine.setSelectedPlayer(player);
                }

                setPlayerStatistics(player);
                showPlayersSkills(player);

            }

            //overides the mouse pressed events for dugout and sets the players transfer handler
            @Override
            public void mousePressed(MouseEvent e) {

                int rowSelected = tblTeam2Dugout.rowAtPoint(e.getPoint());
                int columnSelected = tblTeam2Dugout.columnAtPoint(e.getPoint());

                Player player = gameEngine.getPlayerAtDugoutB(rowSelected, columnSelected);

                if (player != null) {
                    gameEngine.setSelectedPlayer(player);

                    tblGamePitch.setTransferHandler(new PlayersTransferHandler(tblTeam2Dugout, team2, gameEngine));
                    System.out.println("Player tranfering initiated...");
                }
            }
        });
    }

    private void setUpAndRestoreMap() {

        tblGamePitch = new PitchGrid(gameEngine);
        tableModel = new MapTableModel(tblGamePitch);

        tblGamePitch.setModel(tableModel);

        tblGamePitch.setRowHeight(25);
        TableColumn col;

        for (int i = 0; i < tblGamePitch.getColumnCount(); i++) {
            col = tblGamePitch.getColumnModel().getColumn(i);
            col.setMaxWidth(25);
        }

        tblGamePitch.setCellSelectionEnabled(true);
        tblGamePitch.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        pnlBoard.setLayout(new BorderLayout());
        pnlBoard.add(tblGamePitch, BorderLayout.CENTER);

        tblGamePitch.setSelectionBackground(Color.BLUE);

        tblGamePitch.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {

                int rowSelected = tblGamePitch.rowAtPoint(e.getPoint());
                int columnSelected = tblGamePitch.columnAtPoint(e.getPoint());


                Player player = gameEngine.getPlayerAtPitch(rowSelected, columnSelected);

                PitchCell pitchCell = new PitchCell(rowSelected, columnSelected);

                if (player == null) {
                    if (gameEngine.getSelectedPlayer() != null) {
                        if (gameEngine == null) {
                            System.out.println("Game engine is null...");
                        }
                        gameEngine.movePlayer(pitchCell);                       
                    }
                } else {
                    gameEngine.setSelectedPlayer(player);

                    setPlayerStatistics(player);
                    showPlayersSkills(player);
                }

                ball.setLocation(rowSelected, columnSelected);
                tblGamePitch.setToolTip("");

                if (!actionManager.IsKickedOff() && gameEngine.getPitch().hasBall()) {
                    JOptionPane.showMessageDialog(null, "Referee says: Game Kick off");
                    actionManager.kickOff();
                    ball.deleteObservers();
                }
            }
        });

        tblGamePitch.setDropMode(DropMode.ON_OR_INSERT);
    }

    /**
     * This methods displays the selected player statistics
     * 
     * @param player
     */
    private void setPlayerStatistics(Player player) {

        if (player == null) {
            jLblSkills.setText("Skills: -");
            jLblMA.setText("MA: -");
            jLblAG.setText("AG: -");
            jLblAV.setText("AV: -");
            jLblST.setText("ST: -");
            jLblIsActive.setText("Is Active: -");
            jLblPlayerImage.setIcon(null);
        } else {
            jLblMA.setText("MA: " + player.getMa());
            jLblAG.setText("AG: " + player.getAg());
            jLblAV.setText("AV: " + player.getAv());
            jLblST.setText("ST: " + player.getSt());
            jLblIsActive.setText("Is Active: " + player.getActive());

            ///StringBuilder skillBuilder = new StringBuilder("Skills: ");
            //JList list = new JList(new Vector(arrayList));

            DefaultListModel lstSkillModel = new DefaultListModel();
            for (Skills skill : player.getSkillsList()) {
                lstSkillModel.addElement(skill);
            }

            jLstPlayerSkills.setModel(lstSkillModel);


//            for (Skills skill : player.getSkillsList()) {
//
//                skillBuilder.append(skill).append(" ");
//            }
//            jLblSkills.setText(skillBuilder.toString());

            TeamType playerTeamType;
            if (player.getTeamID() == gameEngine.getTeamA().getID()) {
                playerTeamType = gameEngine.getTeamA().getType();
            } else {
                playerTeamType = gameEngine.getTeamB().getType();
            }

            jLblPlayerImage.setIcon(new ImageIcon(getClass().getResource(Utility.getImagePlayerResource(player, playerTeamType))));
        }

    }

    private void showPlayersSkills(Player player) {
        StringBuilder skillBuilder = new StringBuilder("Skills: ");

        if (player != null) {
            if (player.getTeamID() == gameEngine.getTeamA().getID()) {
                for (Skills skill : player.getSkillsList()) {
                    skillBuilder.append("\n").append(skill);
                }
                //jTxtTeam1.setText(skillBuilder.toString());

            } else {

                if (player != null) {
                    if (player.getTeamID() == gameEngine.getTeamB().getID()) {
                        for (Skills skill : player.getSkillsList()) {
                            skillBuilder.append("\n").append(skill);
                        }
                        //jTxtTeam2.setText(skillBuilder.toString());

                    }
                }
            }
        }
    }

    /**
     * Initialise both teams, place team in the dugout
     * Add the dugout and the pitch to the player observer
     */
    private void initialiseTeams() {

        team1 = gameEngine.getTeamA();
        team2 = gameEngine.getTeamB();

        for (int i = 0; i < team1.getPlayers().size(); i++) {
            Player p1 = team1.getPlayer(i);

            //adds team1 pitch and dugout to the list of observers
            p1.addObserver(tblGamePitch);
            p1.addObserver(tblTeam1Dugout);


        }

        for (int i = 0; i < team2.getPlayers().size(); i++) {
            Player p2 = team2.getPlayer(i);

            //adds team2 pitch and dugout to the list of observers
            p2.addObserver(tblGamePitch);
            p2.addObserver(tblTeam2Dugout);

        }

        gameEngine.placeTeamsInReserves();

        jLblTeam1.setText("Team: " + gameEngine.getTeamA().getName());
        jLblTeam2.setText("Team: " + gameEngine.getTeamB().getName());

    }

    private void restoreTeams() {

        team1 = gameEngine.getTeamA();
        team2 = gameEngine.getTeamB();

        for (int i = 0; i < team1.getPlayers().size(); i++) {
            Player p1 = team1.getPlayer(i);

            //adds team1 pitch and dugout to the list of observers

            p1.addObserver(tblGamePitch);
            p1.addObserver(tblTeam1Dugout);

            p1.setLocation(p1.getLocation());
        }

        for (int i = 0; i < team2.getPlayers().size(); i++) {
            Player p2 = team2.getPlayer(i);

            //adds team2 pitch and dugout to the list of observers
            p2.addObserver(tblGamePitch);
            p2.addObserver(tblTeam2Dugout);

            p2.setLocation(p2.getLocation());
        }

        jLblTeam1.setText("Team: " + gameEngine.getTeamA().getName());
        jLblTeam2.setText("Team: " + gameEngine.getTeamB().getName());

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BloodBowl().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar gameMenuBar;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLblAG;
    private javax.swing.JLabel jLblAV;
    private javax.swing.JLabel jLblIsActive;
    private javax.swing.JLabel jLblMA;
    private javax.swing.JLabel jLblPlayerImage;
    private javax.swing.JLabel jLblST;
    private javax.swing.JLabel jLblSkills;
    private javax.swing.JLabel jLblTeam1;
    private javax.swing.JLabel jLblTeam2;
    private javax.swing.JList jLstActions;
    private javax.swing.JList jLstPlayerSkills;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu jMenuTossCoin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPnlBackground;
    private javax.swing.JPanel jPnlDugOutTeamA;
    private javax.swing.JPanel jPnlDugOutTeamB;
    private javax.swing.JPanel jPnlLog;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel pnlBoard;
    private javax.swing.JMenuItem quitGameMenuItem;
    private javax.swing.JMenuItem saveGameMenuItem;
    // End of variables declaration//GEN-END:variables
    private MapTableModel tableModel;
    private DugOutTableModel tableModelTeam1;
    private DugOutTableModel tableModelTeam2;
    private PitchGrid tblGamePitch;
    private JButton btn;
    private TeamEditor teamEditor;
    private DugOutGrid tblTeam1Dugout;
    private DugOutGrid tblTeam2Dugout;
    private SaveGame saveGameDialog;
}
