
package bloodbowl.model.managers;


import bloodbowl.engine.Game;
import bloodbowl.model.map.Cell;
import bloodbowl.model.players.Player;

/**
 * Class to take care of all the actions that the player can do.
 * This class will be responsible for the validity of the actions.
 * It takes care of initiating and committing the action as well.
 * For all such actions it communicates with the Game Engine i.e. the Game Class.
 * @author Rishinder
 */
public class ActionManager {

    Game game;
    Player selectedPlayer;
    int opponentsInfluence;

    public ActionManager()
    {
    }

    
    /**
     * Method that informs the Game about the action initiation
     * @param newGameState Updated state of the game i.e. the current game state.
     */
    public void initiateMoveAction(Game newGameState)
    {
        game = newGameState;
        selectedPlayer = game.getSelectedPlayer();
        game.initiateMoveAction();
    }


    /**
     * Method to inform the Game about the action completion
     */
    public void commitMove()
    {
        selectedPlayer = null;
        game.commitMoveAction();
        game = null;
    }


    /**
     * Method to check if the player is tackled by an opponent
     */
    public void refreshOpponentsInfluence()
    {
        int totalOpponents = (game.getOpponentTeam()).getTotalPlayers();
        for (int i = 0; i < totalOpponents; i++)
        {
            if ((((game.getOpponentTeam()).getPlayer(i))).getActive())
            {
                if (((game.getOpponentTeam()).getPlayer(i)).isNear(selectedPlayer.getLocation()))
                {
                    opponentsInfluence++;
                }
            }
        }
    }


    /**
     * Main method for moving the players by validating the move request
     * @param destinationCell Destination in the pitch, where the player has to move
     * @return true if the move is successful, else returns false
     */
    public boolean moveSelectedPlayerAt(Cell destinationCell) {
        boolean playerMoved = false;
        if (selectedPlayer != null && selectedPlayer.isNear(destinationCell)
                && selectedPlayer.getActive() && game.isWaitingForMoveAction()
                && selectedPlayer.canMove() && !destinationCell.hasPlayer())
        {
            selectedPlayer.setLocation(destinationCell);
            selectedPlayer.decreaseMovementLeft();
            System.out.println("the player has moved");
            game.drawMap();
            playerMoved = true;
        } else {
            System.out.println("Invalid move");
            playerMoved = false;
        }

        return playerMoved;
    }
}
