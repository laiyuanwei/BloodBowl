package bloodbowl.model.managers;
import bloodbowl.model.players.*;
import bloodbowl.model.teams.Team;
import bloodbowl.model.teams.Elves;
import bloodbowl.model.teams.Humans;
import bloodbowl.model.teams.Orcs;

public class TeamManager {
    Team currentTeam;
    
    public void createTeam(int teamID,int teamType, String teamName)
    {
        if(teamType==Team.HUMAN_TYPE)
            currentTeam= new Humans(teamID,teamName);
        else if(teamType==Team.ELF_TYPE)
            currentTeam= new Elves(teamID,teamName);
        else if(teamType==Team.ORC_TYPE)
            currentTeam= new Orcs(teamID,teamName);
    }
    public boolean createPlayer(int playerType)
    {
        Player newPlayer=null;
        String defaultName;

        if(currentTeam.isValidPlayerAddition(playerType))
        {
            
            if(playerType==Player.BLACKORC)
            {
                defaultName="Black Orc";
                newPlayer=new Blackorc(currentTeam.getBlackorcMA(),currentTeam.getBlackorcST(),currentTeam.getBlackorcAG(),currentTeam.getBlackorcAV(),defaultName,currentTeam.getID(),currentTeam.getBlackorcSkills(), playerType);
            }
            else if(playerType==Player.BLITZER)
            {
                defaultName="Blitzer";
                newPlayer=new Blitzer(currentTeam.getBlitzerMA(),currentTeam.getBlitzerST(),currentTeam.getBlitzerAG(),currentTeam.getBlitzerAV(),defaultName,currentTeam.getID(),currentTeam.getBlitzerSkills(), playerType);
            }
            else if(playerType==Player.CATCHER)
            {
                defaultName="Catcher";
                newPlayer=new Catcher(currentTeam.getCatcherMA(),currentTeam.getCatcherST(),currentTeam.getCatcherAG(),currentTeam.getCatcherAV(),defaultName,currentTeam.getID(),currentTeam.getCatcherSkills(), playerType);
            }
            else if(playerType==Player.GOBLIN)
            {
                defaultName="Goblin";
                newPlayer=new Goblin(currentTeam.getGoblinMA(),currentTeam.getGoblinST(),currentTeam.getGoblinAG(),currentTeam.getGoblinAV(),defaultName,currentTeam.getID(),currentTeam.getGoblinSkills(), playerType);
            }
            else if(playerType==Player.LINEMAN)
            {
                defaultName="Lineman";
                newPlayer=new Lineman(currentTeam.getLinemanMA(),currentTeam.getLinemanST(),currentTeam.getLinemanAG(),currentTeam.getLinemanAV(),defaultName,currentTeam.getID(),currentTeam.getLinemanSkills(), playerType);
            }
            else if(playerType==Player.OGRE)
            {
                defaultName="Ogre";
                newPlayer=new Ogre(currentTeam.getOgreMA(),currentTeam.getOgreST(),currentTeam.getOgreAG(),currentTeam.getOgreAV(),defaultName,currentTeam.getID(),currentTeam.getOgreSkills(), playerType);
            }
            else if(playerType==Player.THROWER)
            {
                defaultName="Thrower";
                newPlayer=new Thrower(currentTeam.getThrowerMA(),currentTeam.getThrowerST(),currentTeam.getThrowerAG(),currentTeam.getThrowerAV(),defaultName,currentTeam.getID(),currentTeam.getThrowerSkills(), playerType);
            }
            else if(playerType==Player.TROLL)
            {
                defaultName="Troll";
                newPlayer=new Troll(currentTeam.getTrollMA(),currentTeam.getTrollST(),currentTeam.getTrollAG(),currentTeam.getTrollAV(),defaultName,currentTeam.getID(),currentTeam.getTrollSkills(), playerType);
            }
            currentTeam.addPlayer(newPlayer);
            return true;
        }
        return false;
    }
    
    public void setTeam(Team teamFromGame)
    {
        currentTeam=teamFromGame;
    }
    public Team getTeam()
    {
        return currentTeam;
    }
}
