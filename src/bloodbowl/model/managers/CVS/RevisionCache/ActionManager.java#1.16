package bloodbowl.model.managers;

import bloodbowl.engine.Game;
import bloodbowl.model.map.Cell;
import bloodbowl.model.objects.Ball;
import bloodbowl.model.players.Player;
import bloodbowl.model.teams.Team;
import java.io.Serializable;

/**
 * Class to take care of all the actions that the player can do.
 * This class will be responsible for the validity of the actions.
 * It takes care of initiating and committing the action as well.
 * For all such actions it communicates with the Game Engine i.e. the Game Class.
 * @author Rishinder
 * @version 1.0.0
 */
public class ActionManager implements Serializable {

    Game game;
    Player selectedPlayer;
    private boolean isKickedOff;

    public ActionManager(Game game) {
        this.game = game;
    }

    public ActionManager(){
        
    }
    /**
     * Method that informs the Game about the action initiation
     * @param newGameState Updated state of the game i.e. the current game state.
     */
    public void initiateMoveAction() {
        //game = newGameState;        
        selectedPlayer = game.getSelectedPlayer();
        game.initiateMoveAction();
    }

    /**
     * Method to inform the Game about the action completion
     */
    public void commitMove() {
        selectedPlayer.doneActionInTurn();
        selectedPlayer = null;
        game.commitMoveAction();
    }

    /**
     * Method to check if the player is tackled by an opponent
     */
    public boolean isTackleZone() {
        int totalOpponents = (game.getOpponentTeam()).getTotalPlayers();
        for (int i = 0; i < totalOpponents; i++) {
            if ((((game.getOpponentTeam()).getPlayer(i))).getActive()) {
                if (((game.getOpponentTeam()).getPlayer(i)).isNear(selectedPlayer.getLocation())) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Method to check if the destination is tackled by an opponent
     */
    public int getOpponentsInfluenceOn(Cell destination) {
        int opponentsInfluenceOnDestination=0;
        int totalOpponents = (game.getOpponentTeam()).getTotalPlayers();
        for (int i = 0; i < totalOpponents; i++) {
            if ((((game.getOpponentTeam()).getPlayer(i))).getActive()) {
                if (((game.getOpponentTeam()).getPlayer(i)).isNear(destination)) {
                    opponentsInfluenceOnDestination++;
                }
            }
        }
        return opponentsInfluenceOnDestination;
    }

    public boolean IsKickedOff() {
        return isKickedOff;
    }

    /**
     * Main method for moving the players by validating the move request
     * @param destinationCell Destination in the pitch, where the player has to move
     * @return true if the move is successful, else returns false
     */
    public boolean moveSelectedPlayerAt(Cell destinationCell) {

        boolean playerMoved = false;
        boolean tackleIssues = false;
        if (selectedPlayer != null && selectedPlayer.isNear(destinationCell)
                && selectedPlayer.getActive() && game.isWaitingForMoveAction()
                && selectedPlayer.canMove() && !destinationCell.hasPlayer()
                && selectedPlayer.getTeamID()==game.getCurrentTeam())
        {
            if(isTackleZone())
            {
                if(breakTackle(getOpponentsInfluenceOn(destinationCell)))
                {
                    tackleIssues=false;
                }
                else
                {
                    tackleIssues=true;
                }
            }
            if(tackleIssues)
            {
                playerMoved = false;
            }
            else
            {
                //Logic to check touchdown condition
                if(selectedPlayer.getTeamID()==Team.TEAM_A && destinationCell.getColumn()==25)
                {
                    game.touchdown();
                }
                else if(selectedPlayer.getTeamID()==Team.TEAM_B && destinationCell.getColumn()==0)
                {
                    game.touchdown();
                }
                else
                {
                    selectedPlayer.setLocation(destinationCell);
                    selectedPlayer.decreaseMovementLeft();
                    playerMoved = true;
                }
            }
        } else {
            playerMoved = false;
        }

        return playerMoved;
    }

    /**
     * Method to check if the tackle has been broken
     * @return true if the tackle has been broken
     */
    public boolean breakTackle(int dodgeModifier)
    {
        boolean succcessfullBreak=false;
        int diceFaceValue=DiceManager.rollD6();
        System.out.println(diceFaceValue);
        if(diceFaceValue==6)
        {
            succcessfullBreak=true;
        }
        else if(diceFaceValue==1)
        {
            succcessfullBreak=false;
        }
        else if(diceFaceValue+selectedPlayer.getAg()+1-dodgeModifier>=7)
        {
            succcessfullBreak=true;
        }
        else
        {
            succcessfullBreak=false;
        }

        System.out.println(diceFaceValue+selectedPlayer.getAg()+1-dodgeModifier);
        return succcessfullBreak;
    }

    /**
     * Method to implement Game Kick-Off
     */
    public void kickOff() {
        if (game == null) {
            game = Game.getInstance();
        }
        Ball ball = game.getGameBall();
        int directionForKickOff = DiceManager.rollD8();
        int distanceForKickOff = DiceManager.rollD6();

        isKickedOff = true;

        switch (directionForKickOff) {
            case 0:
                ball.moveBottomLeftBy(distanceForKickOff);
                break;
            case 1:
                ball.moveBottomRightBy(distanceForKickOff);
                break;
            case 2:
                ball.moveDownBy(distanceForKickOff);
                break;
            case 3:
                ball.moveUpBy(distanceForKickOff);
                break;
            case 4:
                ball.moveRightBy(distanceForKickOff);
                break;
            case 5:
                ball.moveLeftBy(distanceForKickOff);
                break;
            case 6:
                ball.moveTopLeftBy(distanceForKickOff);
                break;
            case 7:
                ball.moveTopRightBy(distanceForKickOff);
                break;
        }

        int directionForBounce = DiceManager.rollD8();
        switch (directionForBounce) {
            case 0:
                ball.moveBottomLeftBy(1);
                break;
            case 1:
                ball.moveBottomRightBy(1);
                break;
            case 2:
                ball.moveDownBy(1);
                break;
            case 3:
                ball.moveUpBy(1);
                break;
            case 4:
                ball.moveRightBy(1);
                break;
            case 5:
                ball.moveLeftBy(1);
                break;
            case 6:
                ball.moveTopLeftBy(1);
                break;
            case 7:
                ball.moveTopRightBy(1);
                break;
        }
    }
}
