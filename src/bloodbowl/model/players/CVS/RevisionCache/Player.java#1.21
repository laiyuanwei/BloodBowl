package bloodbowl.model.players;

import bloodbowl.model.map.Cell;
import bloodbowl.model.map.PitchCell;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Observable;

/**
 * The player class that deals with all types of players.
 * It's an abstract class, which should be inherited by each Player type to function as a player.
 * The list of objects of this class go into the team object to form a team of players.
 * @author Rishinder
 * @version 1.0.0
 */
public abstract class Player extends Observable implements Serializable {

    int ma, st, ag, av;                 //ma=Movement Allowance, st=Strength, ag=Agility, av=Armor Value
    int maLeft;                         //Movement allowance left after a move
    int teamID;                         //For Team A, teamID=1. For Team B, teamID=2;
    Cell location;            //Location in the Map (pitch or the dugout)
    boolean isActive;                   //Player is on pitch
    boolean isInjured;                  //Player is in injured zone
    boolean isKnockedOut;               //Player is in knowcked out zone
    boolean hasMoved;                   //Player has made its move in the turn
    
    ArrayList<Skills> skillsList;
    PlayerType type;               //Stores player type


    /**
     * Default constructor for player.
     * Not used at all
     */
    public Player()
    {
       skillsList=new ArrayList(); 
    }

    /**
     * Player constructor
     * @param ma Movement Allowance
     * @param st Strength
     * @param ag Agility
     * @param av Armor Value
     * @param teamID Team ID in current game play.
     * @param skills List of skills that the player possesses
     * @param type Type of player i.e. Black Orc, Lineman, etc.
     */
    public Player(int ma, int st, int ag, int av,  int teamID, ArrayList<Skills> skills, PlayerType type) {
        this.ma = ma;
        this.st = st;
        this.ag = ag;
        this.av = av;
        this.teamID = teamID;
        this.type=type;
        skillsList = skills;
        maLeft = ma;
    }

   

    /**
     * Method to reset the movement left (maLeft) back to the initial movement allowance on a move complete.
     */
    public void resetMovementLeft() {
        maLeft = ma;
    }

    /**
     * Method to update the movement left (maLeft) on each move.
     */
    public void decreaseMovementLeft() {
        maLeft--;
    }

    /**
     * Method to check if the player can move depending upon the movement allowance left.
     * @return true if the player can still move in regard to its movement allowance, else returns false
     */
    public boolean canMove() {
        if (maLeft > 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Method to check if the player has moved in its turn
     * @return True if it has moved. False otherwise.
     */
    public boolean hasMoved() {
        return hasMoved;
    }

    /**
     * Method to set the new location of the player on a move.
     * Resets the previous location so that it could be used by another player.
     * Used during the game play.
     * @param newLocation New cell, a pitch cell more specifically.
     */
    public void setLocation(Cell newLocation)
    {
        location.resetPlayer();
        location = (PitchCell) newLocation;
        location.setPlayer();
        setActive();
        
        setChanged();
        notifyObservers();
    }

    /**
     * Method to set the new location of the player when moved from dugout to the pitch.
     * @param setUpLocation New cell, a pitch cell more specifically.
     */
    public void setUpOnLocation(Cell setUpLocation) //Method for setting location at game start
    {
        setUpLocation.setPlayer();      //Inform cell that it has something
        location = setUpLocation;         //Assign player to the respective cell
        isActive = false;                  //Make the player active

        setChanged();
        notifyObservers();

    }

    /**
     * Method to check is the Clicked cell is adjacent to the player's cell to make the player move cell by cell.
     * @param clickedCell destination location in the pitch
     * @return true is the player is adjacent to the clicked cell, else returns false.
     */
    public boolean isNear(Cell clickedCell) {
        boolean isNearVar = false;
        if (clickedCell.getRow() == location.getRow() - 1 && clickedCell.getColumn() == location.getColumn() - 1) {
            isNearVar = true;
        } else if (clickedCell.getRow() == location.getRow() - 1 && clickedCell.getColumn() == location.getColumn()) {
            isNearVar = true;
        } else if (clickedCell.getRow() == location.getRow() - 1 && clickedCell.getColumn() == location.getColumn() + 1) {
            isNearVar = true;
        } else if (clickedCell.getRow() == location.getRow() + 1 && clickedCell.getColumn() == location.getColumn() - 1) {
            isNearVar = true;
        } else if (clickedCell.getRow() == location.getRow() + 1 && clickedCell.getColumn() == location.getColumn()) {
            isNearVar = true;
        } else if (clickedCell.getRow() == location.getRow() + 1 && clickedCell.getColumn() == location.getColumn() + 1) {
            isNearVar = true;
        } else if (clickedCell.getRow() == location.getRow() && clickedCell.getColumn() == location.getColumn() - 1) {
            isNearVar = true;
        } else if (clickedCell.getRow() == location.getRow() && clickedCell.getColumn() == location.getColumn() + 1) {
            isNearVar = true;
        }

        return isNearVar;
    }

    /**
     * Method to make the player's status from inactive to active and notify the to the map as well.
     * Called when the player is placed from the dugout to the pitch.
     */
    public void setActive() {
        this.isActive = true;

        setChanged();
        notifyObservers();
    }

    /**
     * Method to get the status of the player
     * @return Player Status
     */
    public boolean getActive() {
        return isActive;
    }

    /***************************Other Getters and Setters************************/
    /**
     * Method to get current location of the player.
     * @return Cell where the player is present.
     */
    public Cell getLocation() {
        return location;
    }
    /**
     * Method to set the team (A or B) for the player
     * @param id Team ID i.e. TeamA or TeamB
     */
    public void setTeamID(int id) {
        teamID = id;
    }

    /**
     * Method for getting the teamID of the player
     * @return teamID in integer form
     */
    public int getTeamID() {
        return teamID;
    }

    /**
     * Method to get the type of the player
     * @return Player type from the choices present in the player type enumerator
     */
    public PlayerType getType() {
        return type;
    }

    /**
     * Method to get the Movement allowance of the player
     * @return Movement allowance
     */
    public int getMa() {
        return ma;
    }

    /**
     * Method to get Strength
     * @return Strength
     */
    public int getSt() {
        return st;
    }

    /**
     * Method to get Armor Value
     * @return Armor Value
     */
    public int getAv() {
        return av;
    }

    /**
     * Method to set the Agility of the player
     * @param ag Agility in integer form
     */
    public void setAg(int ag) {
        this.ag = ag;
    }

    /**
     * Method to set Armor Value
     * @param av Armor Value
     */
    public void setAv(int av) {
        this.av = av;
    }

    /**
     * Method to set Movement allowance
     * @param ma Movement Allowance
     */
    public void setMa(int ma) {
        this.ma = ma;
    }

    /**
     * Method to set the Skills for the player
     * @param skillsList List of Skills
     */
    public void setSkillsList(ArrayList<Skills> skillsList) {
        this.skillsList = skillsList;
    }

    /**
     * Method to get the Skill set of the player
     * @return list of Skills
     */
    public ArrayList<Skills> getSkillsList() {
        return skillsList;
    }

    /**
     * Method to set the player's strength
     * @param st Strength
     */
    public void setSt(int st) {
        this.st = st;
    }

    /**
     * Method to get player's Agility
     * @return Agility
     */
    public int getAg() {
        return ag;
    }
    /***************************************************************************/
}
