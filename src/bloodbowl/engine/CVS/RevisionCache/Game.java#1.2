/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package bloodbowl.engine;

/**
 *
 * @author singh
 */
import bloodbowl.model.managers.TeamManager;
import bloodbowl.model.managers.ActionManager;
import bloodbowl.model.map.*;
import bloodbowl.model.players.Player;
import bloodbowl.model.teams.*;
import java.util.Random;

public class Game
{
    PitchGrid pitch;                    //Common pitch for both the teams
    DugoutGrid dugoutA, dugoutB;        //Two seperate dugouts for both the teams
    TeamManager teamManager;
    ActionManager actionManager;
    Team teamA,teamB;
    Player selectedPlayer;              //Player currently selected i.e. clicked by the mouse
    int currentTeam;                    //Stores the team ID which has its turn.
    boolean isWaitingForAction;         //Flag to inform if the game is waiting for some action.

    /************************Constants***********************/
    int TEAM_A=1,TEAM_B=2;
    /********************************************************/
    public Game()
    {
        pitch=new PitchGrid();
        dugoutA=new DugoutGrid();
        dugoutB=new DugoutGrid();
        teamManager=new TeamManager();
        actionManager=new ActionManager();
        isWaitingForAction=false;
    }

    public void initiateNewAction()         //To set the game to accept an input
    {
        isWaitingForAction=true;
    }
    
    public void commitCurrentAction()       //To commit the action made
    {
        isWaitingForAction=false;
        selectedPlayer.resetMovementLeft(); //Recharge the Movement Allowance for next turn
        selectedPlayer=null;        
    }
    public boolean isWaitingForSomeAction()
    {
        return isWaitingForAction;
    }

    public Player getSelectedPlayer()
    {
        return selectedPlayer;
    }
    public void setSelectedPlayer(Player selectedPlayer)
    {
        this.selectedPlayer = selectedPlayer;
    }

    public int getCurrentTeam()
    {
        return currentTeam;
    }

    public void setCurrentTeam(int currentTeam)
    {
        this.currentTeam = currentTeam;
    }

    public Team getOpponentTeam()
    {
        if(currentTeam==1)
            return teamB;
        else
            return teamA;
    }

    //Method for drawing pitch and dugouts on cosole for debugging
    public void drawMap()
    {
        dugoutA.drawGrid();
        System.out.println("\n");

        dugoutB.drawGrid();
        System.out.println("\n");

        pitch.drawGrid();
    } 


    public void createTeamsForTest()
    {
        teamManager.createTeam(TEAM_A,Team.HUMAN_TYPE,"Greek Gods");
        teamManager.createPlayer(Player.LINEMAN);
        teamManager.createPlayer(Player.LINEMAN);
        teamManager.createPlayer(Player.LINEMAN);
        teamManager.createPlayer(Player.LINEMAN);
        teamManager.createPlayer(Player.LINEMAN);
        teamA=teamManager.getTeam();

        teamManager.createTeam(TEAM_B,Team.ORC_TYPE,"Hell's Angels");
        teamManager.createPlayer(Player.LINEMAN);
        teamManager.createPlayer(Player.LINEMAN);
        teamManager.createPlayer(Player.LINEMAN);
        teamManager.createPlayer(Player.LINEMAN);
        teamB=teamManager.getTeam();
    }
    public void placePlayersOnPitchForTest()
    {
        (teamA.getPlayer(1)).setUpOnLocation(pitch.getCell(3,5));
        (teamB.getPlayer(1)).setUpOnLocation(pitch.getCell(6,5));
        (teamA.getPlayer(2)).setUpOnLocation(pitch.getCell(3,9));
        (teamB.getPlayer(2)).setUpOnLocation(pitch.getCell(8,5));
    }
    public void runTest()
    {
        createTeamsForTest();   //Create 2 dummy teams
        placePlayersOnPitchForTest();   //Make some players active on pitch
        drawMap();          //draw the Map containing players
        
        currentTeam=TEAM_A;                      //set teamA as active team
        selectedPlayer=teamA.getPlayer(1);     //set teamA[1] as selected player
        
        //Set a new action
        actionManager.initiateAction(this);
        actionManager.selectedPlayerMove(pitch.getCell(3,6));
        actionManager.selectedPlayerMove(pitch.getCell(3,7));
        actionManager.selectedPlayerMove(pitch.getCell(3,8));
        actionManager.selectedPlayerMove(pitch.getCell(4,8));
        actionManager.selectedPlayerMove(pitch.getCell(5,8));
        actionManager.commitAction();

    }

    public static void main(String args[])
    {
        Game gt=new Game();
        gt.runTest();
    }   
    

    private static Random randToss;

    public static boolean tossCoin(boolean isHead) {
        randToss = new Random();
        boolean outcome = randToss.nextBoolean();
        if (outcome) {
            return true;
        } else {
            return false;
        }
    }
}
