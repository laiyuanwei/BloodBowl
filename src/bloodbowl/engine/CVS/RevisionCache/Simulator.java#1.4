package bloodbowl.engine;

import bloodbowl.model.managers.ActionManager;
import bloodbowl.model.managers.GameReferee;
import bloodbowl.model.managers.TeamManager;
import bloodbowl.model.objects.Ball;
import bloodbowl.model.players.PlayerType;
import bloodbowl.model.teams.TeamType;

/**
 * This class has been created to simulate the game on console
 * This is not a requirement for the project
 * The only purpose of this class is to test the game on Console base without playing it.
 * @author Rishinder
 */
public class Simulator
{
    TeamManager teamManager;
    ActionManager actionManager;
    Game gameEngine;
    GameReferee referee;
    Ball ball;
    /************************Constants***********************/
    int TEAM_A = 1, TEAM_B = 2;
    /********************************************************/

    public Simulator()
    {
        gameEngine=Game.getInstance();
        initializeSimulator();
    }

    public Simulator(Game gameEngine)
    {
        this.gameEngine=gameEngine;
        initializeSimulator();
        
    }

    public final void initializeSimulator()
    {
        teamManager=new TeamManager();
        actionManager=new ActionManager();
        referee=new GameReferee();
        ball=gameEngine.getGameBall();
    }

    /**
     * Method for drawing the map on console
     */
    public void drawMap()
    {
        gameEngine.getDugoutA().drawGrid();
        System.out.println("\n");

        gameEngine.getDugoutB().drawGrid();
        System.out.println("\n");

        gameEngine.getPitch().drawGrid();
    }

    /**
     * Method for testing the game
     */
    public void createTeamsForTest()
    {
        teamManager.createTeam(TEAM_A, TeamType.HUMAN_TYPE, "Greek Gods");
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        gameEngine.setTeamA(teamManager.getTeam());

        teamManager.createTeam(TEAM_B, TeamType.ORC_TYPE, "Hell's Angels");
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        gameEngine.setTeamB(teamManager.getTeam());
    }

    /**
     * Method for testing the game
     */
    public void placePlayersOnPitchForTest()
    {
        gameEngine.getPlayerAtDugoutA(0,0);
        gameEngine.placePlayerAtPitchCell(5,12);
        gameEngine.getPlayerAtDugoutA(0,1);
        gameEngine.placePlayerAtPitchCell(6,12);
        gameEngine.getPlayerAtDugoutA(0,2);
        gameEngine.placePlayerAtPitchCell(7,12);
    }

    /**
     * Method for testing player movement across the pitch
     */
    public void moveTest()
    {
        actionManager.initiateMoveAction(gameEngine);
        actionManager.moveSelectedPlayerAt(gameEngine.getPitch().getCell(2,3));
        actionManager.moveSelectedPlayerAt(gameEngine.getPitch().getCell(3,3));
        actionManager.moveSelectedPlayerAt(gameEngine.getPitch().getCell(3,4));
        actionManager.moveSelectedPlayerAt(gameEngine.getPitch().getCell(4,4));
        actionManager.moveSelectedPlayerAt(gameEngine.getPitch().getCell(5,4));
        actionManager.commitMove();
    }
    /**
     * Method for running the test
     */
    public void runSimulation()
    {
        createTeamsForTest();
        gameEngine.placeTeamsInReserves();

        placePlayersOnPitchForTest();
        ball.setLocation(10, 2);
        ball.moveBottomRightBy(6);
        drawMap();

        referee.validatePlacement(gameEngine.getTeamA());
        System.out.println(referee.getErrorMsg());
    }

    public static void main(String args[])
    {
        Simulator sim=new Simulator();
        sim.runSimulation();
    }
}
