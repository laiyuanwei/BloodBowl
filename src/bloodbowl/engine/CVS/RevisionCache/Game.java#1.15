/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bloodbowl.engine;


import bloodbowl.model.managers.TeamManager;
import bloodbowl.model.managers.ActionManager;
import bloodbowl.model.map.*;
import bloodbowl.model.players.Player;
import bloodbowl.model.players.PlayerType;
import bloodbowl.model.teams.*;
import java.util.Random;
/**
 * Game Engine for the game.
 * Contains all the logic behind the working of the game.
 * @author Rishinder
 */
public final class Game {

    PitchGrid pitch;                    //Common pitch for both the teams
    DugoutGrid dugoutA, dugoutB;        //Two seperate dugouts for both the teams
    TeamManager teamManager;
    ActionManager actionManager;
    Team teamA, teamB;
    Player selectedPlayer;              //Player currently selected i.e. clicked by the mouse
    int currentTeam;                    //Stores the team ID which has its turn.
    boolean isWaitingForMoveAction;         //Flag to inform if the game is waiting for some action.
    private static Game instance = null;
    /************************Constants***********************/
    int TEAM_A = 1, TEAM_B = 2;

    /********************************************************/
    /**
     * Private Constructor for Singleton pattern
     */
    private Game() {
        pitch = new PitchGrid();
        dugoutA = new DugoutGrid();
        dugoutB = new DugoutGrid();
        teamManager = new TeamManager();
        actionManager = new ActionManager();
        isWaitingForMoveAction = false;
    }

    /**
     * Method to return the single instance
     * @return instance of Game
     */
    public static Game getInstance() {
        if (instance == null) {
            instance = new Game();
        }
        return instance;
    }

    /**
     * Method to inform that some move action will be performed
     */
    public void initiateMoveAction() 
    {
        isWaitingForMoveAction = true;
    }

    /**
     * Method to inform that the move action has been committed.
     */
    public void commitMoveAction() //To commit the move action
    {
        isWaitingForMoveAction = false;
        selectedPlayer.resetMovementLeft(); //Recharge the Movement Allowance for next turn
        selectedPlayer = null;
    }

    /**
     * Method to inform inform that the game is waiting for some move action to be performed.
     * @return
     */
    public boolean isWaitingForMoveAction() {
        return isWaitingForMoveAction;
    }

    /**
     * Method to get the selected player that is selected by the coach
     * @return Player that is selected
     */
    public Player getSelectedPlayer() {
        return selectedPlayer;
    }

    /**
     * Get a player from Dugout of team A
     * @param row Row number of the player's location cell
     * @param column Column number of the player's location cell
     * @return selected player
     */
    public Player getPlayerAtDugoutA(int row, int column) {

        selectedPlayer = null;
        for (Player p : teamA.getPlayers()) {
            if (p.getLocation().getRow() == row && p.getLocation().getColumn() == column) {
                selectedPlayer = p;
                break;
            }
        }

        return selectedPlayer;
    }
    
    /**
     * Get a player from Dugout of team B
     * @param row Row number of the player's location cell
     * @param column Column number of the player's location cell
     * @return selected player
     */
    public Player getPlayerAtDugoutB(int row, int column) {

        selectedPlayer = null;
        int i=0;
        for (Player p : teamB.getPlayers()) {
            if (p.getLocation().getRow() == row && p.getLocation().getColumn() == column) {
                selectedPlayer = p;                
                i+=1;
                break;
            }
        }
        return selectedPlayer;
    }

    /**
     * Get a player from the pitch
     * @param row Row number of the player's location cell
     * @param column Column number of the player's location cell
     * @return selected player
     */
    public Player getPlayerAtPitch(int row, int column) {

        Player pitchPlayer = null;
        for (Player p : teamA.getPlayers()) {
            if (p.getActive() && p.getLocation().getRow() == row && p.getLocation().getColumn() == column) {
                pitchPlayer = p;
                break;
            }
        }

        if (pitchPlayer == null) {
            for (Player p : teamB.getPlayers()) {
                if (p.getActive() && p.getLocation().getRow() == row && p.getLocation().getColumn() == column) {
                    pitchPlayer = p;
                    break;
                }
            }
        }
      
        return pitchPlayer;
    }

    /**
     * Method to Place the player on the pitch cell (row,column)
     * @param row Row number of the player's location cell
     * @param column Column number of the player's location cell
     */
    public void placePlayerAtPitchCell(int row, int column) {
        if (!(pitch.getCell(row, column)).hasPlayer()) {           
            selectedPlayer.setLocation((pitch.getCell(row, column)));
            System.out.println("Successful Placement");
        } else {
            System.out.println("Unsuccessful Placement");
        }
    }

    /**
     * Setter for selected player
     * @param selectedPlayer Selected Player
     */
    public void setSelectedPlayer(Player selectedPlayer) {
        this.selectedPlayer = selectedPlayer;
    }

    /**
     * Getter for current team which has its turn
     * @return current team
     */
    public int getCurrentTeam() {
        return currentTeam;
    }

    /**
     * Setter for current team which has its turn
     */
    public void setCurrentTeam(int currentTeam) {
        this.currentTeam = currentTeam;
    }

    /**
     * Get the team which is not currently acting
     * @return Team A or B depending upon the current team
     */
    public Team getOpponentTeam() {
        if (currentTeam == 1) {
            return teamB;
        } else {
            return teamA;
        }
    }


    /**
     * Getter for team A
     * @return teamA
     */
    public Team getTeamA() {
        return teamA;
    }

    /**
     * Getter for team B
     * @return teamB
     */
    public Team getTeamB() {
        return teamB;
    }

    /**
     * Setter for team A
     */
    public void setTeamA(Team teamA) {
        this.teamA = teamA;
    }

    /**
     * Setter for team B
     */
    public void setTeamB(Team teamB) {
        this.teamB = teamB;
    }


    /**
     * Method for placing the players in reserves when a new game begins.
     */
    public void placeTeamsInReserves() {
        for (int i = 0; i < teamA.getTotalPlayers(); i++) {
            (teamA.getPlayer(i)).setUpOnLocation(dugoutA.getCell(i / 4, i % 4));
        }
        for (int i = 0; i < teamB.getTotalPlayers(); i++) {
            (teamB.getPlayer(i)).setUpOnLocation(dugoutB.getCell(i / 4, i % 4));
        }
    }

    /*************************For testing/debugging***************************/
    /**
     * Method for testing the game
     */
    public void drawMap() {
        dugoutA.drawGrid();
        System.out.println("\n");

        dugoutB.drawGrid();
        System.out.println("\n");

        pitch.drawGrid();
    }

    /**
     * Method for testing the game
     */
    public void createTeamsForTest() {
        teamManager.createTeam(TEAM_A, TeamType.HUMAN_TYPE, "Greek Gods");
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamA = teamManager.getTeam();        

        teamManager.createTeam(TEAM_B, TeamType.ORC_TYPE, "Hell's Angels");
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamB = teamManager.getTeam();     
    }

    /**
     * Method for testing the game
     */
    public void placePlayersOnPitchForTest() {
        getPlayerAtDugoutA(0,0);
        placePlayerAtPitchCell(2,2);
    }

    /**
     * Method for running the test
     */
    public void runTest() {
        createTeamsForTest();   //Create 2 dummy teams
        placeTeamsInReserves();
        drawMap();
        placePlayersOnPitchForTest();   //Make some players active on pitch

        currentTeam = TEAM_A;           //set teamA as active team

        //Initiate a move action
        actionManager.initiateMoveAction(this);
        actionManager.moveSelectedPlayerAt(pitch.getCell(2,3));
        actionManager.moveSelectedPlayerAt(pitch.getCell(3,3));
        actionManager.moveSelectedPlayerAt(pitch.getCell(3,4));
        actionManager.moveSelectedPlayerAt(pitch.getCell(4,4));
        actionManager.moveSelectedPlayerAt(pitch.getCell(5,4));
        actionManager.commitMove();

    }

//    public static void main(String args[]) {
//        Game gt = getInstance();
//        gt.runTest();
//    }

    /*************************************************************************/

    /**
     * Method for initiating a move action
     * @param pitchCell Destination for move
     * @return true for successful move, else false
     */
    public boolean movePlayer(PitchCell pitchCell)
    {
        //Initiate a move action
        actionManager.initiateMoveAction(this);
        return actionManager.moveSelectedPlayerAt(pitchCell);
    }

    private static Random randToss;
    /**
     * Method for the toss to be done during game setup
     * @param isHead if coin gets a head on fall
     * @return 
     */
    public static boolean tossCoin(boolean isHead) {
        randToss = new Random();
        boolean outcome = randToss.nextBoolean();
        if (outcome) {
            return true;
        } else {
            return false;
        }
    }
}
