package testManagers;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */



import bloodbowl.model.managers.TeamManager;
import bloodbowl.model.players.PlayerType;
import bloodbowl.model.teams.Team;
import bloodbowl.model.teams.TeamType;
import junit.framework.Assert;
import junit.framework.TestCase;

/**
 *
 * @author Administrator
 */
public class TeamManagerTest extends TestCase {

    private TeamManager teamManager=null;
    Team teamA, teamB,teamX;
    
    public TeamManagerTest(String testName) {
        super(testName);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        teamManager= new TeamManager();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Test of createTeam method, of class TeamManager.
     */
    public void testCreateTeam() {
        teamManager.createTeam(1, TeamType.HUMAN_TYPE, "Greek Gods"); // 1 stands for team A
        teamA = teamManager.getTeam();

        Assert.assertEquals(1, teamA.getID());
        Assert.assertEquals(TeamType.HUMAN_TYPE, teamA.getType());
        Assert.assertEquals("Greek Gods",teamManager.getTeam().getName() );
       }

    /**
     * Test of createPlayer method, of class TeamManager.
     */
    public void testCreatePlayer() {
        teamManager.createTeam(2, TeamType.ORC_TYPE, "Just a test"); //2 stands for team B
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.BLITZER);
        teamB = teamManager.getTeam();
        Assert.assertEquals(4, teamB.getNumLineman());
       // Assert.assertEquals(16, teamB.getMaxLineman());
        Assert.assertEquals(5, teamB.getTotalPlayers());
        Assert.assertEquals(1, teamB.getNumBlitzer());
    }

    /**
     * Test of setTeam method, of class TeamManager.
     */
    public void testSetTeam() {

        teamManager.createTeam(2, TeamType.ORC_TYPE, "Just a test"); //2 stands for team B
        teamB = teamManager.getTeam();

        teamManager.setTeam(teamB);
        Assert.assertEquals("Just a test",teamManager.getTeam().getName());

        
    }

    /**
     * Test of getTeam method, of class TeamManager.
     */
    public void testGetTeam() {
       teamManager.createTeam(3, TeamType.ELF_TYPE, "Concordia");
       teamX=teamManager.getTeam();
       Assert.assertEquals("Concordia",teamX.getName());
    }

    /**
     * Test of saveTeam method, of class TeamManager.
     */
 /*   public void testSaveTeam() throws Exception {
        System.out.println("saveTeam");
        Team team = null;
        TeamManager instance = new TeamManager();
        instance.saveTeam(team);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
*/
    /**
     * Test of restoreTeam method, of class TeamManager.
     */
 /*  public void testRestoreTeam() throws Exception {
        System.out.println("restoreTeam");
        String teamName = "";
        TeamManager instance = new TeamManager();
        Team expResult = null;
        Team result = instance.restoreTeam(teamName);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
*/
}
