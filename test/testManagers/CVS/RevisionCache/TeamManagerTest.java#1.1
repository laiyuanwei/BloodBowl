package testManagers;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */



import bloodbowl.model.managers.TeamManager;
import bloodbowl.model.players.PlayerType;
import bloodbowl.model.teams.Team;
import bloodbowl.model.teams.TeamType;
import junit.framework.Assert;
import junit.framework.TestCase;

/**
 *
 * @author Administrator
 */
public class TeamManagerTest extends TestCase {

    private TeamManager teamManager=null;
    Team teamA, teamB;
    
    public TeamManagerTest(String testName) {
        super(testName);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        teamManager= new TeamManager();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Test of createTeam method, of class TeamManager.
     */
    public void testCreateTeam() {
      /*  System.out.println("createTeam");
        int teamID = 0;
        TeamType teamType = null;
        String teamName = "";
        TeamManager instance = new TeamManager();
        instance.createTeam(teamID, teamType, teamName);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    */
        teamManager.createTeam(1, TeamType.HUMAN_TYPE, "Greek Gods"); // 1 stands for team A
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamManager.createPlayer(PlayerType.LINEMAN);
        teamA = teamManager.getTeam();

        Assert.assertEquals(1, teamA.getID());
       }

    /**
     * Test of createPlayer method, of class TeamManager.
     */
 /*   public void testCreatePlayer() {
        System.out.println("createPlayer");
        PlayerType playerType = null;
        TeamManager instance = new TeamManager();
        boolean expResult = false;
        boolean result = instance.createPlayer(playerType);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
*/
    /**
     * Test of setTeam method, of class TeamManager.
     */
 /*   public void testSetTeam() {
        System.out.println("setTeam");
        Team teamFromGame = null;
        TeamManager instance = new TeamManager();
        instance.setTeam(teamFromGame);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
*/
    /**
     * Test of getTeam method, of class TeamManager.
     */
 /*   public void testGetTeam() {
        System.out.println("getTeam");
        TeamManager instance = new TeamManager();
        Team expResult = null;
        Team result = instance.getTeam();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
*/
    /**
     * Test of saveTeam method, of class TeamManager.
     */
 /*   public void testSaveTeam() throws Exception {
        System.out.println("saveTeam");
        Team team = null;
        TeamManager instance = new TeamManager();
        instance.saveTeam(team);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
*/
    /**
     * Test of restoreTeam method, of class TeamManager.
     */
 /*  public void testRestoreTeam() throws Exception {
        System.out.println("restoreTeam");
        String teamName = "";
        TeamManager instance = new TeamManager();
        Team expResult = null;
        Team result = instance.restoreTeam(teamName);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
*/
}
