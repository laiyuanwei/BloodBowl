/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package testMap;

import bloodbowl.model.map.Cell;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import junit.framework.Assert;
import junit.framework.TestCase;
//import java.io.ByteArrayOutputStream;import java.io.OutputStream;import java.io.PrintStream;import junit.framework.TestCase;

/**
 *
 * @author Yuanwei Lai
 */
public class CellTest extends TestCase {

    private Cell cell=null;
    
    public CellTest(String testName) {
        super(testName);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        cell=new Cell(1,2);
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Test of getColumn method, of class Cell.
     */
    public void testGetColumn() {
       Assert.assertEquals(2, cell.getColumn());
    }

    /**
     * Test of getRow method, of class Cell.
     */
    public void testGetRow() {
        int expResult = 1;
        int result = cell.getRow();
        assertEquals(expResult, result);
        
    }

    /**
     * Test of toString method, of class Cell.
     */
    public void testToString() {
        String expResult ="column:" + 2 + " row:" + 1;
        String result = cell.toString();
        assertEquals(expResult, result);
        
    }

    /**
     * Test of getZone method, of class Cell.
     */
    public void testGetZone() {
        int expResult = 0;
        int result = cell.getZone();
        assertEquals(expResult, result);
        
    }

    /**
     * Test of setPlayer method, of class Cell.
     */
    public void testSetPlayer() {
        cell.setPlayer();
        Assert.assertEquals(true, cell.hasPlayer());
    }

    /**
     * Test of resetPlayer method, of class Cell.
     */
    public void testResetPlayer() {
        cell.resetPlayer();
        Assert.assertEquals(false, cell.hasPlayer());
    }

    /**
     * Test of hasPlayer method, of class Cell.
     */
    public void testHasPlayer() {
        boolean expResult = false;
        boolean result = cell.hasPlayer();
        assertEquals(expResult, result);
        
    }

    /**
     * Test of printStatus method, of class Cell.
     */
    public final void testPrintStatus() {
      //prepare to capture the output
      PrintStream originalOutput=System.out;
      OutputStream os=new ByteArrayOutputStream();
      PrintStream ps=new PrintStream(os);
      System.setOut(ps);

      //perform tests
      cell.printStatus();
      Assert.assertEquals("Q ",os.toString());

      //restore normal operation
      System.setOut(originalOutput);
      

    }

}
